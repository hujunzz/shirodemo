<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroDbRealm" />
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="shiroDbRealm" class="com.jun.realm.ShiroDbRealm">
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login" />
        <property name="successUrl" value="/view/index.html" />
        <property name="unauthorizedUrl" value="/error/noperms.jsp" />
        <property name="filterChainDefinitions">
            <value>
                /index.html = authc
                /checkLogin = anon
                /login = anon
                /logout.html = anon
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 用户授权信息Cache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
</beans>
        <!--
            filterChainDefinitions参数说明,注意其验证顺序是自上而下
            =================================================================================================
            anon        org.apache.shiro.web.filter.authc.AnonymousFilter
            authc       org.apache.shiro.web.filter.authc.FormAuthenticationFilter
            authcBasic  org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
            perms       org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
            port        org.apache.shiro.web.filter.authz.PortFilter
            rest        org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
            roles       org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
            ssl         org.apache.shiro.web.filter.authz.SslFilter
            user        org.apache.shiro.web.filter.authc.UserFilter
            =================================================================================================
            anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。
            authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
            roles： 例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，
                            并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],
                            每个参数通过才算通过，相当于hasAllRoles()方法。
            perms： 例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
                            例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，
                            想当于isPermitedAll()方法。
            rest：  例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,
                           其中method为post，get，delete等。
            port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
                           其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
            authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
            ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
            user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
            注：anon，authcBasic，auchc，user是认证过滤器，
            perms，roles，ssl，rest，port是授权过滤器
            =================================================================================================
            -->